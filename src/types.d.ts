import { RegistroCaixa } from './types/caixa'
import type { RelatorioData, RelatorioResumo } from './database/relatorios.service'

export {}

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string
declare const MAIN_WINDOW_VITE_NAME: string

// Preload types
export interface ThemeModeContext {
  toggle: () => Promise<boolean>
  dark: () => Promise<void>
  light: () => Promise<void>
  system: () => Promise<boolean>
  current: () => Promise<'dark' | 'light' | 'system'>
}
export interface ElectronWindow {
  minimize: () => Promise<void>
  maximize: () => Promise<void>
  close: () => Promise<void>
}

export interface ICaixaAPI {
  getRegistros: () => Promise<RegistroCaixa[]>
  addRegistro: (
    registro: Omit<RegistroCaixa, 'id' | 'data'>,
  ) => Promise<RegistroCaixa>
  updateRegistro: (
    id: number,
    updates: Partial<RegistroCaixa>,
  ) => Promise<RegistroCaixa>
  deleteRegistro: (id: number) => Promise<{ id: number }>
}

export interface IServicosAPI {
  getServicos: () => Promise<{
    id_servico: string
    nome: string
    preco: number
  }[]>
  getServicoById: (id: string) => Promise<{
    id_servico: string
    nome: string
    preco: number
  } | null>
  criarServico: (novoServico: {
    nome: string
    preco: number
  }) => Promise<{
    id_servico: string
    nome: string
    preco: number
  }>
  atualizarServico: (id: string, atualizacoes: {
    nome?: string
    preco?: number
  }) => Promise<{
    id_servico: string
    nome: string
    preco: number
  } | null>
  excluirServico: (id: string) => Promise<boolean>
}

export interface IRelatoriosAPI {
  getRelatorioCompleto: (dataInicio?: string, dataFim?: string) => Promise<RelatorioData[]>
  getRelatorioResumo: (dataInicio?: string, dataFim?: string) => Promise<RelatorioResumo>
}

declare global {
  interface Window {
    themeMode: ThemeModeContext
    electronWindow: ElectronWindow
    db: {
      caixa: ICaixaAPI
      servicos: IServicosAPI
      relatorios: IRelatoriosAPI
    }
  }
}
